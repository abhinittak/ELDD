#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/types.h>
#include <linux/slab.h>
#include <asm/uaccess.h>
#include <linux/string.h>
#include <linux/device.h>
#include <linux/errno.h>
#include <linux/semaphore.h>
#include<linux/init.h>
#include<linux/moduleparam.h>
#include <linux/miscdevice.h>
#include <linux/kernel.h>    						
#include <linux/gpio.h>      						
#include <linux/interrupt.h> 						
#include <linux/time.h>
#include <linux/unistd.h>
#include <linux/kthread.h>
#include <linux/delay.h>
#include <linux/module.h> 
#include <linux/spinlock.h>
#include "gpio_ioctl.h"
#include <linux/spinlock_types.h>

#define NUM_DEVICES 2
#define GPIO_INT_NAME  "gpio_int"
#define SIZE_OF_BUF      5
#define DEVICE_NAME1    "HCSR_1"
#define DEVICE_NAME2    "HCSR_2"

/*global variales*/
int usDeviceNo=0;
int errno;
unsigned long long t1,t2;
short int irq_any_gpio    = 0;
int count =0;
uint64_t tsc1=0, tsc2=0;

/*argument structure*/
typedef struct
{
	int send_trigger;
	int send_time ;
}Sarg, *PSarg;

/*rdtsc timer structure*/
typedef struct {
	uint64_t TSC;
}data, *Pdata;

/*ring buffer structure*/
struct ring_buf {
	Pdata ptr;
	int   head;
	int   tail;
	unsigned long count;
	unsigned long loss;
};

/*device structure */
struct HCSR_DEV_OBJ {
	struct miscdevice my_misc_dev;             							
	struct semaphore lock;
	int state;
	int mode;
	int time;
	int dev_num;
	struct ring_buf *Pring_buf;
	int thread_state;
	int trigger_pin;
	int echo_pin;
	spinlock_t m_Lock;
	int ongoing;
	struct task_struct *task;
	struct HCSR_DEV_OBJ *next;
} *PPSHCSR_DEV_OBJ[NUM_DEVICES];

typedef struct HCSR_DEV_OBJ SHCSR_DEV_OBJ;
typedef struct HCSR_DEV_OBJ* PSHCSR_DEV_OBJ;

struct HCSR_DRIVER_OBJ
{
	PSHCSR_DEV_OBJ  head;
}SHCSR_DRIVER_OBJ, *PSHCSR_DRIVER_OBJ;

/*Pin configuration function declaration*/
int configure(int in_pin, int in_dir, int in_val);


#if defined(__i386__)
static __inline__ unsigned long long get_tsc(void)

{
	unsigned long long int x;
     	__asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
     	return x;
}

#elif defined(__x86_64__)
static __inline__ unsigned long long get_tsc(void)

{
	unsigned hi, lo;
  	__asm__ __volatile__ ("rdtsc" : "=a"(lo), "=d"(hi));
  	return ( (unsigned long long)lo)|( ((unsigned long long)hi)<<32 );
}
#endif

/*IRQ handler
* handling the interrupts at rising and falling edge
*/
static irqreturn_t r_irq_handler(int irq, void *dev_id)
{
	PSHCSR_DEV_OBJ  pshcsr_dev_obj = (PSHCSR_DEV_OBJ)dev_id;
	unsigned long flags;
	int distance;	
	int check = gpio_get_value(pshcsr_dev_obj->echo_pin);
        count++;    
	printk( "interrupt received (irq: %d)\n", irq);
	
	if (irq == gpio_to_irq(pshcsr_dev_obj->echo_pin)) 
	{
		if (check ==0)
		{  
	        	printk("gpio pin is low\n");  
	 		tsc2=get_tsc();
			distance =  ((int)(tsc2-tsc1)/(139200)); 								// processor_freq * 58 = 2400 * 58= 139200 
			if (pshcsr_dev_obj->Pring_buf->ptr)
			{
				spin_lock_irqsave(&pshcsr_dev_obj->m_Lock, flags );
			       	pshcsr_dev_obj->Pring_buf->ptr[pshcsr_dev_obj->Pring_buf->tail].TSC = distance;
				pshcsr_dev_obj->Pring_buf->tail = (pshcsr_dev_obj->Pring_buf->tail + 1) % SIZE_OF_BUF;
				if (pshcsr_dev_obj->Pring_buf->tail == pshcsr_dev_obj->Pring_buf->head)
				{
					pshcsr_dev_obj->Pring_buf->loss++;
				}
				else
				{
					pshcsr_dev_obj->Pring_buf->count++;
				}
				pshcsr_dev_obj->ongoing = 0;
				spin_unlock_irqrestore(&pshcsr_dev_obj->m_Lock, flags);
			}
			
			if(pshcsr_dev_obj->state == 1)  
			{
				up(&pshcsr_dev_obj->lock);
				printk("releasing the semaphore\n");
				pshcsr_dev_obj->state =0;
			}
			irq_set_irq_type(irq, IRQ_TYPE_EDGE_RISING);				//change the pin to rising edge
		}
       		else
		{
			tsc1=get_tsc();
	    		printk("gpio pin is high\n");  
			irq_set_irq_type(irq, IRQ_TYPE_EDGE_FALLING);											//change the pin to falling edge
	
		}
	}
	return IRQ_HANDLED;  
}